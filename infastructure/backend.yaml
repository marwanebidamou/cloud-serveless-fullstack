AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  SourceCodeS3BucketName:
    Type: String
    Description: "S3 bucket for backend source code."

  SourceCodeS3BucketARN:
    Type: String
    Description: "ARN of the S3 bucket for backend source code."

  SourceCodeZipFile:
    Type: String
    Description: "The zip file where the backend source code is stored."

  EmailAddress:
    Type: String
    Description: "Enter an email address for SNS notifications."

Resources:
  # ----------------------------------------------------------------------------
  # 1) S3 Bucket for Profile Pictures
  # ----------------------------------------------------------------------------
  UserProfileBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "authwave-profile-images-${AWS::AccountId}-${AWS::Region}"
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ["*"]
            AllowedMethods: ["GET", "PUT", "POST", "DELETE", "HEAD"]
            AllowedHeaders: ["*"]
            ExposedHeaders: ["x-amz-request-id", "x-amz-id-2"]
            MaxAge: 3000

  # ----------------------------------------------------------------------------
  # 2) DynamoDB Table for Authentication
  # ----------------------------------------------------------------------------
  AuthUsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "AuthUsers-${AWS::AccountId}-${AWS::Region}"
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # ----------------------------------------------------------------------------
  # 3) IAM Role for Lambda Execution
  # ----------------------------------------------------------------------------
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "UserAuthLambdaRole-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: !Sub "arn:aws:s3:::authwave-profile-images-${AWS::AccountId}-${AWS::Region}/*"

              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AuthUsers-${AWS::AccountId}-${AWS::Region}"

              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # ----------------------------------------------------------------------------
  # 4) AWS Lambda Function
  # ----------------------------------------------------------------------------
  AuthLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UserAuthFunction
      Handler: index.handler # index.ts => compiled to index.js => "index.handler"
      Runtime: nodejs18.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref SourceCodeS3BucketName
        S3Key: !Ref SourceCodeZipFile
      Timeout: 10
      MemorySize: 512
      Environment:
        Variables:
          BUCKET_NAME: !Sub "authwave-profile-images-${AWS::AccountId}-${AWS::Region}"
          TABLE_NAME: !Sub "AuthUsers-${AWS::AccountId}-${AWS::Region}"

  # ----------------------------------------------------------------------------
  # 5) API Gateway (Regional Endpoint)
  # ----------------------------------------------------------------------------
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: UserAuthAPI
      Description: "API Gateway for User Authentication"
      EndpointConfiguration:
        Types: ["REGIONAL"]

  # ----------------------------------------------------------------------------
  # 6) Single Catch-All Proxy Resource {proxy+}
  # ----------------------------------------------------------------------------
  ApiGatewayProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "{proxy+}" # This is the wildcard catch-all

  # ----------------------------------------------------------------------------
  # 7) ANY Method for the Proxy Resource
  # ----------------------------------------------------------------------------
  ApiGatewayMethodProxyAny:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambdaFunction.Arn}/invocations"

  # ----------------------------------------------------------------------------
  # 8) Deployment & Stage (prod)
  # ----------------------------------------------------------------------------
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodProxyAny
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  # ----------------------------------------------------------------------------
  # 9) Permission for API Gateway to Invoke Lambda
  # ----------------------------------------------------------------------------
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

Outputs:
  ApiGatewayInvokeURL:
    Description: "API Gateway Invoke URL (prod stage)"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
